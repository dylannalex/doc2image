from pydantic import BaseModel, Field

from .llm import BaseLLM
from .prompt import Prompt


class _ChunkSummaryOutputFormat(BaseModel):
    summary: str = Field(
        ...,
        description="Summary of the document chunk generated by the LLM.",
    )
    is_sufficient: bool = Field(
        ...,
        description="Indicates if the summary is sufficient for generating image ideas.",
    )


class _ImagePromptsOutputFormat(BaseModel):
    prompts: list[str] = Field(
        ...,
        description="List of image prompts based on the document summary.",
    )


class DocumentSummarizer:
    def __init__(
        self,
        llm: BaseLLM,
        document_chunks: list[str],
        max_document_summary_size: int,
        max_chunk_summary_size: int,
        summarize_chunk_prompt: Prompt,
        generate_document_summary_prompt: Prompt,
    ):
        """
        Initialize the DocumentSummarizer.

        Args:
            llm (BaseLLM): The LLM instance to use for summarization.
            document_chunks (list[str]): List of document chunks to summarize.
            max_document_summary_size (int): Maximum size of the document summary.
            max_chunk_summary_size (int): Maximum size of each chunk summary.
            summarize_chunk_prompt (Prompt): Prompt for summarizing each chunk.
            generate_document_summary_prompt (Prompt): Prompt for generating the document summary.
        """
        self.llm = llm
        self.document_chunks = document_chunks
        self.max_document_summary_size = max_document_summary_size
        self.max_chunk_summary_size = max_chunk_summary_size
        self.summarize_chunk_prompt = summarize_chunk_prompt
        self.generate_document_summary_prompt = generate_document_summary_prompt

    def run(self) -> tuple[str, list[str]]:
        """
        Summarize the document chunks and generate a global summary.

        Returns:
            tuple[str, list[str]]: A tuple containing the global document summary and a list of chunk summaries.
        """
        # Summarize each chunk of the document until the summary is sufficient or
        # all chunks are processed
        chunk_summaries = []
        for chunk in self.document_chunks:
            messages = self.summarize_chunk_prompt.format(
                {
                    "chunk_text": chunk,
                    "max_chunk_summary_size": self.max_chunk_summary_size,
                    "chunks_summaries": "\n\n".join(chunk_summaries),
                }
            )
            chunk_summary: _ChunkSummaryOutputFormat = self.llm.generate(
                messages=messages, output_format=_ChunkSummaryOutputFormat
            )

            chunk_summaries.append(chunk_summary.summary)

            if chunk_summary.is_sufficient:
                break

        # Generate the global summary of the document
        messages = self.generate_document_summary_prompt.format(
            {
                "chunks_summaries": "\n\n".join(chunk_summaries),
                "max_document_summary_size": self.max_document_summary_size,
            }
        )

        document_summary: str = self.llm.generate(messages=messages, output_format=None)

        return document_summary, chunk_summaries


class ImagePromptsGenerator:
    def __init__(
        self,
        llm: BaseLLM,
        document_summary: str,
        total_prompts_to_generate: int,
        generate_image_prompts_prompt: Prompt,
    ):
        """
        Initialize the ImagePromptsGenerator.

        Args:
            llm (BaseLLM): The LLM instance to use for generating image prompts.
            document_summary (str): The summary of the document to base prompts on.
            total_prompts_to_generate (int): Total number of prompts to generate.
            generate_image_prompts_prompt (Prompt): Prompt for generating image prompts.
        """
        self.llm = llm
        self.document_summary = document_summary
        self.total_prompts_to_generate = total_prompts_to_generate
        self.generate_image_prompts_prompt = generate_image_prompts_prompt

    def run(self) -> list[str]:
        """
        Generate image prompts based on the document summary.

        Returns:
            list[str]: A list of generated image prompts.
        """
        messages = self.generate_image_prompts_prompt.format(
            {
                "document_summary": self.document_summary,
                "total_prompts_to_generate": self.total_prompts_to_generate,
            }
        )

        image_prompts: _ImagePromptsOutputFormat = self.llm.generate(
            messages=messages, output_format=_ImagePromptsOutputFormat
        )

        return image_prompts.prompts
